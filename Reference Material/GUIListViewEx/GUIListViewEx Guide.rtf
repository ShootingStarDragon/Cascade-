{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang2057{\fonttbl{\f0\froman\fcharset0 Times New Roman;}{\f1\froman\fcharset0 Arial;}{\f2\froman Arial;}}
{\colortbl ;\red0\green0\blue0;\red255\green0\blue0;}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\hyphpar0\qc\f0\fs24\lang9\rquote\cf1\charscalex100\ul\b\f1\fs36\lang2057 A Beginner\rquote s Guide To Melba23\rquote s \i GUIListViewEx\i0  UDF\par

\pard\hyphpar0\ulnone\b0\fs24\par
This UDF is a pretty complex beast - and while the example scripts show most of the functionality, I thought it would be useful to have a short guide to the various functionalities.\par
\par
\ul\b Initialisation\ulnone\b0 :\par
\par
Create the ListView as normal \f2\endash\f1  you can use either native or UDF created ListViews with the UDF.\par
\par
If the ListView already has content, \b you need to pass that to the UDF as an \cf2 array\cf1\b0 . So either create the array as you fill the ListView or use the \i _GUIListViewEx_ReadToArray\i0  function to read the content.\par
\par
Once you have an array, you can initialise the ListView using the \i _\b GUIListViewEx\b0 _Init\i0  function. Make sure that the \i $\b iStart\i0  parameter matches the array \b0 you have passed to the UDF. \b\i As standard, the UDF allows you to drag/drop items within the ListView and other ListViews which have also been initialised\b0\i0 . The \i $\b iAdded\i0  \b0 parameter allows you to prevent internal and external drag/drop, as well as allowing for column sorting, column header editing, and  individually coloured and/or selectable items within the ListView.\par
\par
Once the ListView is initialised you can set which columns can be edited using the \i _GUIListViewEx_SetEditStatus\i0  to define the type of edit required (choose text, combo, date picker, or set a user-defined function allowing for even more possibilities). If the text editing consists of numeric values, an updown control, with pre-set limits if required, is an option. For combo editing you need to define the combo content and whether it is read-only \f2\endash\f1  for date picker editing you can define the default date and the date format. Both combos and date pickers can optionally be automatically opened for selection. Editable columns can also have editable headers (either by text or combo) which are set by using the \i _GUIListViewEx_LoadHdrData\i0  function.\par
\par
You can set the default colours for the ListView items, both normal and selected, using \i _GUIListViewEx_SetDefColours\i0  and optionally pass an array to colour specific items using \i _GUIListViewEx_LoadColour\i0 . You can later amend the colour of a specific item using \i _GUIListViewEx_SetColour\i0 . Note that using colours automatically limits the selection to a single row.\par
\par
You can also set the colours of the column headers using \i _GUIListViewEx_LoadHdrData\i0  and an array holding the required header titles and colours. These can be amended during execution by re-running the function. This same function can also set the manner in which column headers can be edited (text or combo) as well as optionally preventing columns from being resized by the user.\par
\par
You will need to register some Windows messages so that the UDF can intercept various key and mouse events and determine the correct actions to take. This is done via \i _GUIListViewEx_MsgRegister\i0  \f2\endash\f1  note that if using coloured items, this function must be run \b before\b0  calling \i GUISetState\i0  to display the GUI in which the ListView appears. Registering \i WM_NOTIFY\i0  is needed for all UDF functions, \i WM_MOUSEMOVE\i0  and \i WM_LBUTTONUP \i0 are only needed if dragging, while \i WM_SYSCOMMAND\i0  just permits the use of the \b [X]\b0  to close the GUI immediately while editing.\par
\par
\ul For more advanced users\ulnone : The UDF registers these 4 messages automatically \f2\endash\f1  if you already have handlers for these messages in your script, do not register them again using the UDF function (set the relevant parameter to \i False\i0 ) but call the relevant UDF handler function from within your existing handler. Note that the UDF handler should be called as the final action of the existing handler and the return value should be that returned from the UDF handler - this is particularly important when any colour functionality is used.\par
\par
Finally, if you want to edit the ListView, use item colouring, or use UDF-generated tooltips, you must add the \i _GUIListViewEx_EventMonitor\i0  function to the idle loop. See below for more details on how to interpret the return from the function.\par
\par
\ul\b Saving and Loading\ulnone\b0 :\par
\par
If you have previously saved a ListView using \i _GUIListViewEx_SaveListView\i0 , you can directly load another initialised ListView with same content using \i _GUIListViewEx_LoadListView\i0 .\par
\par
\ul\b Altering the ListView dimensions\ulnone\b0 :\par
\par
You can add and/or remove rows and columns from the ListView:\par
\par

\pard\hyphpar0\fi-360\li360\tx720\i - _GUIListViewEx_Insert\i0  inserts a row below the selected row (or at the bottom if no selection)\par

\pard\hyphpar0\par

\pard\hyphpar0\fi-360\li360\tx720\i - _GUIListViewEx_InsertSpec\i0  allows you to define the row to insert\par

\pard\hyphpar0\par

\pard\hyphpar0\fi-360\li360\tx720\i - _GUIListViewEx_Delete\i0  removes any selected rows\par

\pard\hyphpar0\par

\pard\hyphpar0\fi-360\li360\tx720\i - _GUIListViewEx_DeleteSpec\i0  removes specified rows\par

\pard\hyphpar0\par

\pard\hyphpar0\fi-360\li360\tx720\i - _GUIListViewEx_InsertCol\i0  inserts a column to the right of the last selected column (or at the right end if no selection)\par

\pard\hyphpar0\par

\pard\hyphpar0\fi-360\li360\tx720\i - _GUIListViewEx_InsertColSpec\i0  allows you to define the column(s) to insert\par

\pard\hyphpar0\par

\pard\hyphpar0\fi-360\li360\tx720\i - _GUIListViewEx_DeleteCol\i0  removes the last selected columns\par

\pard\hyphpar0\par

\pard\hyphpar0\fi-360\li360\tx720\i - _GUIListViewEx_DeleteColSpec\i0  removes the specified column(s)\par

\pard\hyphpar0\par
\ul\b Editing ListView content and headers\ulnone\b0 :\par
\par
If you have set some columns of the ListView to be editable, you can edit an item either by double-clicking it or by selecting it and then pressing a \ldblquote\i HotKey\i0\rdblquote  (by default this is \i\{BackSpace\}\i0  but this can be changed via the \i _GuiListViewEx_SetEditKey\i0  function). You must add the \i _GUIListViewEx_EventMonitor\i0  function to your idle loop so that the UDF can detect when these events occur and can begin the edit process. This function returns an array after editing has occurred so that you can see the changed values \f2\endash\f1  very useful for verifying that the new values are valid. Headers of editable columns can be edited by clicking them with the \i Ctrl\i0  key pressed.\par
\par
You can also force an item or header to open for editing by using \i _GUIListViewEx_EditItem\i0  or \i _GUIListViewEx_EditHeader\i0  \f2\endash\f1  the column need not be editable.  Finally, you can easily adjust the content of a ListView item programmatically using \i _GUIListViewEx_ChangeItem\i0  - useful for resetting an invalid edit. \par
\par
While editing you can move from cell to cell by setting the \i $iEditMode\i0  parameter when calling \i _GUIListViewEx_EventMonitor\i0  - the default is to end the edit process, but you can also allow a \i Ctrl- arrow\i0  key press to move to another cell (as long as it is editable) as well as determining what to do when you reach a edge and whether cancelling the edit process will cancel all previous edits. If the column is edited using a combo or a date-picker then any changes made will be abandoned - a simple text edit will be accepted. Note that read-only combos must have a value selected from the drop-down list for the edit to be accepted.\par
\par
\ul\b Reading ListView content\ulnone\b0 :\par
\par
You can get a the current content of the ListView at any time by using the \i _GUIListViewEx_ReturnArray\i0  function. The \i $iMode\i0  parameter allows you to choose an array of the current content, the checkbox state, the colours used, or the header text.\par
\par
If the data within the ListView is too wide for the column and does not fully display, you can ask the UDF to display a tooltip showing the full item content when it is clicked by using the \i _GUIListViewEx_ToolTipInit\i0  function. You can also get the UDF to display the content of the leftmost column of the row \f2\endash\f1  this can be useful if there are many columns and you need to make sure you are amending the correct row when the ListView is scrolled to the right. In either case you need to add the \i _GUIListViewEx_EventMonitor\i0  function to your idle loop.\par
\par
If the \i $LVS_EX_HEADERDRAGDROP\i0  style has been set and the column order has been re-arranged, the UDF returns the content as it appears on screen.\par
\par
\ul\b Sorting ListView columns\ulnone\b0 :\par
\par
If set when initialised, clicking a column header will sort the column. You can also sort a column using the \i _GUIListViewEx_SortCol\i0  function. Specified columns can be set to use a user-defined sort function (or no sort at all) with the \i _GUIListViewEx_UserSort\i0  function - by default the UDF uses the standard\i  _ArraySort \i0 function to sort a column.\par
\par
\ul\b Drag/Drop\ulnone\b0 :\par
\par
By default the ListView will allow drag/drop operations both within the ListView and to other initialised ListViews with the same number of columns. Using the \i $iAdded\i0  parameter when initialising to change the external and internal drag/drop behaviour.\par
\par
\par
\par
\par
\ul\b\i _GUIListViewEx_EventMonitor\i0  idle loop function\ulnone\b0 :\ul\par
\ulnone\par
The \i _GUIListViewEx_EventMonitor\i0  function which can be added to the script idle loop allows you to monitor 3 types of UDF event - you can determine which event type occurred by the value returned in \i @extended\i0 :\par
\par
-  \b 0\b0  = \ul No event detected\ulnone : This is the default setting and an empty string is returned. However, \i @error\i0  will be set in certain cases, allowing you to determine the cause of the error.\par
\par
-  \b 1\b0  = \ul Editing event\ulnone : The function will return an array showing which cells have been edited, as well as their current and previous content, as explained above.\par
\par
-  \b 2\b0   = \ul Header edit event\ulnone : The function will return an array showing which header has been edited, as well as its current and previous content.\par
\par
-  \b 3\b0  = \ul Sorting event\ulnone : The function returns the index of the ListView that has been sorted.\par
\par
-  \b 4\b0  = \ul Drag/Drop event\ulnone : The function returns the colon delimited indices of the ListViews involved. \par
\par
-  \b 9\b0  = \ul User selection change event\ulnone : The function returns an array showing the ListView in which the selection was made as well as the selected row and column. \par
\par
The sort and drag/drop event monitoring is useful if you reorder the items in a ListView and need to recalculate some other data \f2\endash\f1  e.g. elapsed running time for music tracks.\par
\par

\pard\hyphpar0\tx720 The example scripts include a comprehensive template of how all of the possible event return values can be differentiated - obviously not all scripts need to detect all events, so any unneeded \i Case\i0  sections can be skipped.\par
\par
The \i _GUIListViewEx_EventMonitor\i0  function should also be placed in the idle loop in 2 other cases:\par
\par
-  When any form of ListView colouring is used - as it automatically forces a redraw of a colour-enabled ListViews after a sort or drag/drop operation to ensure that the colours will display correctly.\par
\par
-  When \i _GUIListViewEx_ToolTipInit \i0 is used - as otherwise the tooltips will not display.\par
\par
Basically - if in doubt, add this function to the idle loop! \par
\par

\pard\hyphpar0\ul\b Other functions\ulnone\b0 :\par
\par
\i - _GUIListViewEx_EditWidth\i0 : If you wish for an edit or combo to be wider/narrower than the actual column being edited, this function allows you to set the required value.\par
\par
\i - _GUIListViewEx_BlockReDraw\i0 : If you are adjusting the size of the ListView by adding or deleting several rows/columns in quick succession, this function prevents the ListView redrawing the content until all is complete, significantly speeding up the operation (particularly when using colour).\par
\par
\i - _GUIListViewEx_ContextPos\i0 : This function returns the ListView index and row/column of the last right click in an initialised ListView. This allows you to identify from which item the context menu has been called.\par
\par
\ul\b Closure and Reloading\ulnone\b0 :\par
\par
If you delete the ListView, then it is recommended to use \i _GUIListViewEx_Close\i0  to free the memory used by the UDF.\par
\par
If you wish to reload the ListView with new data, you will need to clear the current content using \i _GUICtrlListView_DeleteAllItems\i0 , close it within the UDF using \i _GUIListViewEx_Close\i0 , reload the ListView with the new data and then reinitialise it using \i _GUIListViewEx_Init\i0 . Otherwise the UDF will become confused about the current content and errors will certainly occur.\par
\par
\ul\b Examples\ulnone\b0 :\par
\par
The UDF example scripts show most of these functions in action \f2\endash\f1  so study them carefully to see how to implement them. But do not hesitate to post in the UDF thread if you have any problems integrating the UDF into your script - or if you think you have discovered a bug.  However, if you are requesting an additional functionality, a positive reply is most certainly not guaranteed as the UDF is complicated enough already!\par
\par

\pard\sa200\sl276\slmult1 Melba23\par
}
 